С чего начинается исследовательское тестирование:
1. Как правило внятного ТЗ нет, по этому для начала необходимо получить ответы на следующие вопросы:
- Что хотим от тестирования?
- Зачем тестируемый продукт нужен?
- Какие проблемы данный продукт решает?
2. Начинаем исследовать продукт.

Типы исследовательского тестирования:
1. Monkey-testing - представляет собой метод , в котором тестировщик проверяет приложения или системы, обеспечивая случайные входы с целью найти Bug-и.
Чаще всего данный вид тестирования автоматизируют. Цель теста состоит в том, чтобы буквально попытаться сбить систему и убедиться в том, что это не так. 
Для этой цели тест может включать в себя случайные тесты, такие как буквальный ввод случайных строк в текстовые поля, чтобы увидеть, как система будет обрабатывать ошибку.

Преимущества:
- Эффективный способ выявления некоторых нестандартных ошибок
- Хороший способ для выполнения нагрузочного и стресс-тестирования
- Внутренняя случайность тестирования хорошо находит серьезные ошибки, которые могут нарушить работу всей системы. 
Недостатки:
- Найденные ошибки очень сложно воспроизвести
- Ошибки занимают много времени для анализа

2. Ad hoc - вид тестирования, который выполняется без подготовки к тестам, без определения ожидаемых результатов, проектирования тестовых сценариев. 
Это неформальное, импровизационное тестирование. Он не требует никакой документации, планирования, процессов которых следует придерживаться в выполнении. 
На данный вид тестирования не пишутся тест-кейсы. Как правило выполняется, когда нет времени на точное и последовательное тестирование. 
Тестировщик полагается на свое общее представление о приложении и на здравый смысл.

Виды Ad hoc тестирования:
- Buddy testing (совместное тестирование) — когда 2 человека, как правило разработчик + тестировщик, работают параллельно и находят дефекты в одном и том же модуле. 
Такой вид тестирования помогает тестировщику выполнять необходимые проверки, а программисту фиксить баги на ранних этапах.
Pair testing (парное тестирование) — когда 2 тестировщика проверяют один модуль и помогают друг другу. К примеру один может искать дефекты, а второй их документировать. 
Таким образом у одного тестера будет функция, скажем так обнаружителя, у другого — описателя

Преимущества:
- Нет необходимости тратить время для подготовки документации
- Самые важные дефекты обнаруживаются на ранних этапах
- Часто применяется когда берут нового сотрудника
- Возможность найти хитрые дефекты, которые нельзя было бы найти используются стандартные сценарии проверок.
Недостатки:
- Найденные ошибки очень сложно воспроизвести
- Ошибки занимают много времени для анализа

3. Exploratory - одновременно является и техникой и видом тестирования. Такое тестирование подразумевает под собой одновременно изучение проекта, функционала, 
проектирование тест кейсов в уме и тут же их исполнение не записывая и не создавая тестовую документацию.
Такой вид тестирования обычно не предусматривается в тест плане и тест кейсы выполняются и модифицируются динамически. 
Эффективность такого тестирования напрямую зависит от опыта тестировщика ранее имевшим дело с этим приложением, платформой, знанием мест скопления возможных багов 
и рисками которые относятся к конкретному продукту.
Цель данного тестирования — это углубление в познании продукта, приложения и нахождения «на лету» возможных багов. 
Также такое тестирование помогает в дальнейшем проектировании тест кейсов для покрытия функционала данного приложения.

Когда стоит применять:
- Необходимо обеспечить быструю обратную связь о новом продукте или фиче
- Необходимо быстро изучить продукт
- Было проведено скриптовое тестирование и необходимо разнообразить своё тестирование
- Необходимо найти самый важный баг в кратчайшие сроки
- Необходимо проверить работу другого тестировщика
- Необходимо обнаружить и локализовать дефект
- Необходимо изучить состояние конкретного риска для принятия решения о необходимости покрытия этой области скриптовыми тестами

Помощники для исследовательского тестирования:
1. Эвристики и мнемоники
2. Тест-туры
3. Чек-листы

Эвристика - Процесс тестирования на основе эвристик – это такая технология тестирования алгоритмов, приложений и программ, 
при использовании которой стратегия тестирования основывается на предыдущем опыте и данных о вероятности наступления различных событий.

Преимущества тестовых эвристика:
1. Позволяют не забывать контекст, в котором непосредственно и используется тестируемое приложение или продукт
2. Краткость. Все эвристики удобно помещаются в небольшие диаграммы связей, листок бумаги или же в текстовый файл
3. С помощью эвристик можно проводить качественное исследовательское тестирование утилит в более детализированном формате
4. Помогают не совершать ошибки, что могут быть допущены при аналогичных обстоятельствах во время тестирования похожего программного обеспечения. 
Философия использования эвристик позволяет разрабатывать специальные «напоминания» на базе предыдущего опыта – личного или наработок других тестировщиков

Недостаток тестовых эвристика:
1. Эвристическая оценка не может предполагать применение пользовательского тестирования и анализа выполнения настоящих сценариев, 
ее итоги могут быть чрезвычайно субъективными и необоснованными с практической стороны.

Типовые Bug-и:
1. Часто ошибки возникают на границах:
- X < Y
- X <= Y
2. Встречаются в отклонениях от сценария
3. Типы данных (попытки вылезти за Int, записать туда символы и тд.)
4. Валидация клиент-сервер может расходиться
5. Буква ё не входит регулярное выражения [А - я]
6. Concurrency – параллельное изменение
7. Разная инфраструктура
- Linux – Windows
- Oracle – MariaDb
- Android 3.0 – Android 4.0
- Разные видеокарты
- …

Мнемоника – это набор правил и приёмов, которые помогают эффективно запоминать необходимые сведения (информацию).

SFDPOT – San Francisco DPOT:
1. Structure – структура приложения, проверка составляющих его частей
2. Function – Функциональность приложения, проверка того, что приложение делает
3. Data – работа с данными, проверка того, как приложение работает с данными
4. Platform – платформа, проверка того, как приложение взаимодействует с платформой, на которой запущено
5. Operations – использование, проверка сценариев использования
6. Time – время, проверка того, как приложение ведет себя в зависимости от времени

БМВ
1. Большой – проверка больших значений
2. Маленький – проверка маленьких значений
3. В самый раз – проверка значений внутри диапазона
