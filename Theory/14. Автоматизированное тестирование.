Пинрамида автоматизации:
1. Unit - низкоуровневые тесты (51,9%)
2. API - тесты API и интеграционные (41,9%)
3. UI - полные пользовательские сценарии (6,2%)

1. Юнит-тест или модульный тест, — это программа, которая проверяет работу небольшой части кода. 
Разработчики регулярно обновляют сайты и приложения, добавляют feature, перерабатывают код и вносят правки, а затем проверяют, как всё работает.
Тестировать систему целиком после каждого обновления — довольно муторно и неэффективно. Поэтому обновлённые или исправленные части кода прогоняют через юнит-тесты.

Главные правила написания Unit тестов:
- Написали код — напишите тест. 
- Есть более жёсткий принцип: новый код без тестов на ревью не принимается. 
- Использование тестовых фреймворков. 
- Написание простых тестов. Надо понимать, что происходит с входными данными и какой результат должна вернуть функция. 
Если непонятно — меняем нейминг и разбиваем функции на более мелкие, избавляемся от зависимостей. Пусть одна функция принимает результат, а другая возвращает. 
- Написание негативных тестов. Что произойдёт, если передать в программу неправильные данные? Какую ошибку она выведет и выведет ли?
- Покрытие тестами всех циклов и условий. Этот совет касается кода, который нужно поддерживать. 
Если ему не следовать, на одной из итераций правок вы или ваш коллега просто всё сломаете.
- Проверка качества тестов. Сделать это поможет мутационное тестирование. Мутационный фреймворк случайно меняет константы и значения в условных операторах и циклах, 
создаёт копию кода, в которой поочерёдно меняет условия
- Обеспечение достаточного процента покрытия кода. 
- Нельзя делать хрупкие тесты. Если тест нестабильный и регулярно падает, его называют хрупким. 
Его результат может зависеть от дня недели, времени суток, чётности или нечётности запуска. 
Бывает, две функции работают параллельно и на итоговый результат влияет то, какая из них закончит выполняться первой. 
Такие функции лучше разбивать на несколько простых и тестировать по отдельности. 
- Скорость тестов. Тесты должны работать быстро. Если они проверяют кусок кода 10–15 минут — разработчики устанут ждать и отключат их нафиг. 
Поэтому регулярно проверяйте скорость, ищите узкие места и оптимизируйте тесты. 
Если есть проблемы, подключитесь через дебаггер — возможно, основной код плохо оптимизирован и искать проблему нужно в продакшне.

Преимущества Unit тестов:
- Упрощают работу — находят ошибки, которые тестировщик может не заметить
- Понятно документируют код. Если неочевидно, как работает та или иная функция, можно пройти дальше по коду или открыть юнит-тест. 
По нему сразу видно, какие параметры принимает функция и что отдаёт после выполнения. Это упрощает жизнь тем, кто работает с чужим кодом.
- Помогают ничего не сломать при рефакторинге. Бывает, что код написан непонятно и достаточно сложно его отрефакторить. С тестами код можно смело рефакторить.
- Упрощают разработку. Кажется, что юнит-тесты всё усложняют, ведь нужно написать в два раза больше кода — не только функцию, но и тест к ней. 
Но на самом деле когда пишешь код без тестов, потом тратится гораздо больше времени на поиск и исправление ошибок.

2. API – это механизмы, которые позволяют двум программным компонентам взаимодействовать друг с другом, используя набор определений и протоколов. 
Например, система ПО метеослужбы содержит ежедневные данные о погоде. Приложение погоды на телефоне «общается» с этой системой через API и показывает ежедневные 
обновления погоды на телефоне.
API-тесты – это как раз автоматизированные тесты направленные на проверку взаимодействия двух программных компонент

3. UI-тесты – проверки пользовательских сценариев.
Selenium - это набор программ с открытым исходным кодом, которые применяют для автоматизации тестирования веб-приложений и администрирования сайтов локально и в сети.
Из каких программ состоит Selenium:
- Selenium IDE - плагин для браузера Firefoх для записи действий пользователя (тестировщика) и их воспроизведения для тестирования. 
Является библиотекой Selenium с графическим интерфейсом и возможностями для работы со сценариями тестирования веб-страниц. 
IDE генерирует код для Selenium RC или Selenium WebDriver, который повторяет записанные действия пользователей.

- Selenium RC - предыдущий основной продукт Selenium до появления WebDriver в 2007 году. Программа, называемая также Selenium 1.0, 
являлась средством удаленного управления браузером, но по функциональности сильно уступала WebDriver (Selenium 2.0). 
Selenium RC продолжает поставляться в дистрибутиве WebDriver, но продукт не развивается — при необходимости сложных тестов вне ограничений первой версии 
пользователям предлагают воспользоваться второй.

- Selenium WebDriver - библиотека для управления браузерами, основной продукт комплекта Selenium. Представляет из себя семейство драйверов для разных браузеров 
(Firefox, Edge, Google Chrome/Chromium, Internet Explorer, Safari, Opera) и набор клиентских библиотек на разных языках программирования для работы с драйверами. 
WebDriver поддерживает работу с языками Java, .Net (C#), Python, Ruby, JavaScript.
WebDriver напрямую отправляет команды браузеру, используя его API и получает результаты тестирования. 
В предыдущей версии Selenium RC принцип работы был другим — программа внедряла код на языке JavaScript в браузер для управления им. 
WebDriver же использует способ взаимодействия с браузером, максимально близкий к действиям обычного пользователя.

- Selenium Grid - кластер из нескольких Selenium-серверов, которые позволяют управлять браузером удаленно по сети. 
Grid позволяет организовать сеть, в которой можно запускать большое количество браузеров на большом количестве компьютеров. 
Параллельное тестирование позволяет тестировщикам экономить время.

- Selenium Server - сервер для управления браузером удаленно по сети.

Преимущества Selenium:
- Selenium — бесплатный продукт с открытым исходным кодом для тестирования с поддержкой всех основных языков программирования. 
Его можно использовать на разных браузерах в разных операционных системах, включая мобильные устройства.
- Selenium WebDriver — гибкий инструмент тестирования, который можно легко интегрировать с разными тестовыми фреймворками и другими инструментами тестирования. 
Это позволяет расширить инструментарий тестировщика и применять его для узких задач, например web crawling и тестирования производительности.
- Selenium разрабатывают с 2004 года, и за это время он стал самым популярным инструментом функционального тестирования веб-приложений. 
Его используют в крупных корпорациях, включая Google.

Недостатки Selenium:
1. В программах Selenium можно тестировать только веб-приложения, функций тестирования сетевых и десктопных приложений в комплекте нет. 
Также для работы с Selenium нужно владеть продвинутыми навыками программирования и написания скриптов. 
Новички в тестировании могут пользоваться более простыми аналогами Selenium, например Katalon Studio или UFT.
