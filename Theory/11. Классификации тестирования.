Классификации тестирования:
1. По знанию системы
2. По позитивности
3. По целям (объекту)
4. По исполнителям (субъекту)
5. По времени проведения
6. По степени автоматизации
7. По состоянию системы
8. По формальности

Классификация по знанию системы:
1. Черный ящик - метод тестирования, внутренняя структура, дизайн и реализация которого неизвестна тестировщику 
(при подготовке тест-кейсов он опирается на требования и спецификацию)
Где используется этот метод:
- Интеграционное тестирование
- Функциональное тестирование
- Нагрузочное тестирование
- Usability-тестирование
- Тестирование производительности
- Приемочное тестирование
- Регрессионное тестирование
- Beta-тестирование
Преимущества:
- Тестирование методом «черного ящика» позволяет найти ошибки, которые невозможно обнаружить методом «белого ящика». 
Простейший пример: разработчик забыл добавить какую-то функциональность. С точки зрения кода все работает идеально, 
но с точки зрения спецификации это – сверхкритичный баг.
- «Черный ящик» позволяет быстро выявить ошибки в функциональных спецификациях (в них описаны не только входные значения, но и то, что мы должны в итоге получить). 
Если полученный при тестировании результат отличается от заявленного в спецификации, то у нас появляется повод для общения с аналитиком для уточнения конечного результата.
- Тестировщику не нужна дополнительная квалификация. Тестирование проходит «с позиции пользователя». 
Пользователь всегда прав, он конечный потребитель практически любого ПО, а значит, ему должно быть удобно, комфортно и понятно.
- Составлять тест-кейсы можно сразу после подготовки спецификации. Это значительно сокращает время на тестирование: к тому моменту, как продукт готов к 
тестированию, тест-кейсы уже разработаны, и тестировщик может сразу приступать к проверке.
Недостатки:
- Основным недостатком метода «черного ящика» является возможность пропуска границ и переходов, которые не очевидны из спецификации, 
но есть в реализации кода (собственно, это и заставляет тестировщиков использовать метод «белого ящика»). 
Можно протестировать только небольшое количество возможных вводных (входящих) значений; многие варианты остаются без проверки.
- Тесты могут быть избыточными, если разработчик уже проверил данную функциональность (например, Unit-тестом).
- При отсутствии четкой и полной спецификации проектировать тесты и тест-сценарии оказывается затруднительно.


2. Белый ящик - это тестирование внутренней структуры, дизайна и кодирования программного решения. В этом типе тестирования код виден тестеру. 
Основное внимание уделяется проверке потока входных и выходных данных через приложение, улучшению дизайна и удобства использования, усилению безопасности.
Тестирование белого ящика включает тестирование программного кода для следующего:
- Внутренние дыры в безопасности
- Сломанные или плохо структурированные пути в процессах кодирования
- Поток конкретных входов через код
- Ожидаемый результат
- Функциональность условных циклов
- Тестирование каждого оператора, объекта и функции на индивидуальной основе
Тестирование может проводиться на системном, интеграционном и модульном уровнях разработки программного обеспечения. 
Одной из основных целей тестирования «Белого ящика» является проверка рабочего процесса для приложения. 
Он включает в себя тестирование ряда предопределенных входных данных по отношению к ожидаемым или желаемым выходным данным, 
так что когда конкретный ввод не приводит к ожидаемому выходному сигналу, вы столкнулись с ошибкой.
Как проводить:
- шаг 1 понять исходный код. Первое, что часто делает тестер, — это изучает и понимает исходный код приложения. 
Поскольку тестирование белого ящика включает в себя тестирование внутренней работы приложения, тестировщик должен быть очень хорошо осведомлен в 
языках программирования, используемых в тестируемых приложениях. Кроме того, тестирующий должен быть хорошо осведомлен о методах безопасного кодирования. 
Безопасность часто является одной из основных задач тестирования программного обеспечения. 
Тестер должен уметь обнаруживать проблемы с безопасностью и предотвращать атаки хакеров и наивных пользователей, которые могут вводить вредоносный 
код в приложение как сознательно, так и неосознанно.
- шаг 2 создать испытательные дела и исполнить. Второй базовый шаг к тестированию белого ящика включает в себя тестирование исходного кода приложения на предмет 
правильной работы и структуры. Одним из способов является написание unit тестов для проверки исходного кода приложения и его функций. 
Преимущества:
- Тщательное обдумывание реализации продукта
- Выявление ошибок, скрытых в коде
- Тщательная проверка кода
- Оптимизация
Недостатки:
-Достаточно дорого

3. Серый ящик - специальный метод тестирования программного обеспечения с неполным знанием его внутреннего устройства. 
Чтобы выполнить подобный вид тестов, не нужно иметь доступ к исходному коду ПО.
Все тесты создаются на базе простого знания алгоритмов, архитектуры и иных высокоуровневых характеристик поведения продукта.
Преимущества:
- Имеет некоторые особенности черного и белого ящика. Иными словами, тестировщик смотрит на объект проверки с позиции черного ящика, но проводит анализ 
системы с точным расчетом данных, которые ему предварительно известны (белый ящик).
- QA-специалист может создавать и применять более сложные тестовые сценарии.
- Данная проверка позволяет программисту заручиться достаточным количеством времени для исправления багов.
- Программист взаимодействует с тестировщиком на начальном уровне, что позволяет сразу же убрать ненужные и избыточные тест-кейсы.
Недостатки:
- Анализ программного кода ограничен, так как доступа к исходному коду у тестировщика нет.
- Нет времени тестировать все потоки ввода и вывода информации, так как это займет очень много времени.
- Возможна ситуация, когда тестировщики могут стать лишними (когда не только QA-специалист, но и программист проверяет свой код с помощью юнит-тестов).

Классификация по позитивности:
1. Позитивное
2. Негативное

Классификация по целям (объекту):
1. Функциональное - это тип тестирования продукта, который проверяет на соответствие функциональным требованиям / спецификациям. 
2. Не функциональное - это тип тестирования программного обеспечения для проверки нефункциональных аспектов продукта
- Производительность - это автоматизированное тестирование, имитирующее работу определенного количества бизнес пользователей на каком-либо общем ресурсе.
- Usability - это тестирование удобства интерфейса продукта конечными пользователями. 
- GUI - это особый вид тестирования ПО, при котором реализуется проверка соответствия графического интерфейса пользователя установленным стандартам и нормам, 
заявленных клиентом.
- Безопасность - это стратегия тестирования, используемая для проверки безопасности системы, а также для анализа рисков, связанных с обеспечением целостного подхода 
к защите приложения, атак хакеров, вирусов, несанкционированного доступа к конфиденциальным данным.
- Локализация – тестирование продукта на мультиязычность
- Совместимость – вид тестирования основной целью которого является проверка корректной работы продукта в определенном окружении

Классификация по исполнителям (субъекту):
1. Альфа - тип тестирования, которое выполняется перед выпуском продукта, чтобы выявить все возможные ошибки. 
Это делается для симуляции реальных пользователей с использованием таких методов, как тестирование белого ящика и методика черного ящика. 
Это делается в лабораторной среде, и внутренние сотрудники являются тестерами. Цель состоит в том, чтобы выдержать задачи, которые может выполнять обычный пользователь.
Этапы альфа тестирования:
- Выполняется внутренними разработчиками; они либо используют аппаратные отладчики, либо программное обеспечение отладчика.
- Выполняется командой QA (обеспечение качества).
Он называется альфа только потому, что такого рода тестирование проводится на ранней стадии, то есть ближе к концу разработки программного обеспечения. 
Проводится до бета-тестирования.

2. Бета - тип внешнего приемочного тестирования, проводится реальными пользователями продукта в реальной среде. 
Это сделано, чтобы получить обратную связь по стандарту программного обеспечения / продукта. 
Ограниченное число конечных пользователей тестируют продукт, поскольку он выпускается только ограниченному числу конечных пользователей. 
Это снижает риски отказа продукта, поскольку проверка клиента обеспечивает гиперболическое качество продукта.
Бета-тестирование выполняется в среде заказчика.

Сравнение альфа и бета тестирования:
                           Альфа                                                                    Бета
- Выполняется внутренними работниками организации.                        - Выполняется конечными пользователями или клиентами, которые не являются сотрудниками организации.
- Выполняется внутри организации или на ресурсах команды разработки.      - Выполняется на рабочем месте клиентов/конечного пользователей.
- Включает в себя методы тестирования как белого, так и черного ящиков.   - Включает только технику тестирования черного ящика.
- Не проверяется в полной мере безопасность и надежность продукта.        - Проверяет надежность, безопасность продукта.
- Предназначена, для выявления всех возможных ошибок.                     - Предназначено для проверки качества.
- Требуется Dev среда.                                                    - Требуется среда в реальном времени. Часто используется продуктивная среда.
- Требуется больше времени на тестирование.                               - Требуется меньше времени на тестирование
- Разработчики могут исправлять критичные баги достаточно быстро.         - Собираются отзывы и вопросы от конечных пользователей и только потом передаются разработчикам.
- Изменения и исправления достаточно быстро внедряются                    - Все исправления и доработки включаются в будущие релизы.
- Выполняется для обеспечения качества до этапа бета-тестирования.        - Выполняется для того, чтобы продукт был готов для конечного пользователя.
- Нет проблем с поиском тестировщиков, так как в команде они уже есть.    - Проблемы в поиске тестовой группы.

                     Преимущества Альфа                                                       Преимущества Бета
- Ошибки находят на ранней стадии.                                        - Снижает риски сбоя продукта.
- Дает лучшее представление о качестве и надежности продукта.             - Улучшает качество продукта путем проверки клиентов.
                                                                          - Повышает удовлетворенность клиентов.
                                                                          - Есть возможность общаться с пользователями в режиме реального времени

Классификация по времени проведения:
1. Дымовое (Smoke) - выполняется каждый раз, когда получаем новую версию продукта на тестирование, при этом считая её относительно нестабильной. 
Проверяется критически важный функционал. Идея данного вида тестирования заключается в том, чтобы выявить серьёзные проблемы как можно раньше, и отклонить этот 
Build на раннем этапе тестирования, чтобы не углубляться в долгие и сложные тесты, не затрачивая тем самым время на заведомо бракованное ПО.
2. Тестирование нового функционала – проверка только нового или измененного старого функционала продукта.
3. Регрессионное – то что занимает львиную долю времени и для чего существует автоматизация тестирования. Полное тестирование. 
Проводится когда нужно убедиться что новые функции приложения / исправленные дефекты не оказали влияния на текущую, уже существующую функциональность, 
работавшую (и протестированную) ранее.

Классификация по степени автоматизации:
1. Ручное
2. Автоматизированное

Классификация по состоянию системы:
1. Static - это метод тестирования программного обеспечения, с помощью которого мы можем проверять дефекты программного обеспечения, фактически не выполняя его. 
По большому счету это и есть тестирование документации. Сам продукт нам не нужен.
2. Dynamic – проверки уже запущенного продукта.

Классификация по формальности:
1. По тестам
2. Исследовательское 
