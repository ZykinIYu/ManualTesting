I. Производительность - тестирование, которое не является функциональным. Существует множество видов тестирования производительности. 
Классификация видов тестирования производительности строится на основе того, какие цели преследует определенный вид тестирования. 
Как правило тестирование производительности преследует не одну, а несколько целей в связи с тем, многие типы тестирования в ходе его проведения совмещаются 
с другими целями или повторяются несколько раз в ходе цикла тестирования. Основное отличие тестирования производительности также заключается в том, 
что оно происходит только после полного функционального тестирования. Ошибки функциональности не исправляются в ходе тестирования производительности. 
Для данного вида тестирования чаще всего выделяется отдельный нагрузочный стенд, повторяющий копию промышленного стенда. 
В связи с массовым распространением Agile методологий тестирование производительности также интегрируется в жизненный цикл разработки программного обеспечения.

Классификация тестирования производительности:
1. Нагрузочное тестирование – достаточно ли быстро работает система? Данный тип тестирования позволяет оценить поведение системы при возрастающей нагрузке, 
целью нагрузочного тестирования является также определение максимальной нагрузки, которую может выдержать система.
В роли нагрузки может выступать количество пользователей, а также количество операций на сервере.
Производительность определяется следующими факторами:
- скоростью работы программного обеспечения;
- скоростью работы аппаратного обеспечения;
- скоростью работы сети.
Во время тестирования могут осуществляться следующие операции, позволяющие более точно измерить производительность и определить “узкое место” системы:
- измерение времени выполнения выбранных операций при определенных интенсивностях выполнения этих операций;
- определение количества пользователей, одновременно работающих с приложением;
- определение границ приемлемой производительности при увеличении нагрузки (при увеличении интенсивности выполнения этих операций).

2. Тестирование стабильности – достаточно ли надежно работает система на долгом интервале времени? Позволяет проверить работоспособность системы на длительном
интервале времени. При этом нагрузка может не достигать пиковых значений, а иметь средние значение, так же само время выполнения операций не является основным 
фактором в оценке результатов тестирования.
В ходе тестирования основной акцент делается на измерение
- отсутствие утечек памяти;
- отсутствие перезапусков серверов;
- отсутствие перезапусков программного обеспечения;
- любые ошибки, связанные с накоплением данных;
- отсутствие отключений или сбоев в работе сетевого оборудования.

3. Тестирование отказоустойчивости - сможет ли система переместиться сама на другой сервер в случае сбоя основного сервера? Данный вид тестирования 
производительности позволяет проверить поведение системы в случае сбоя серверов или при других неблагоприятных факторах. 
Такое тестирование особенно важно в системах, работающих в режиме 24/7, т.к. в случае их выхода из строя возможны потери клиентов, репутации, денег и т.п.
Во время тестирования проверяются следующие операции:
- как будет преодолеваться отказ, а именно как система будет перемещать операции между мощностями работающего и нет оборудования;
- как будет осуществлен перехват управления системой при отказе управляющего сервера;
- как будет осуществлен обход и обработка отказа (переключение на резервный канал связи, отправка данных по другому маршруту и т.д.).

4. Тестирование восстановления - как быстро восстановится система? Обычно неотъемлемо связан с тестированием отказоустойчивости и позволяет определить, 
как быстро система сможет восстановится после сбоя её программной или аппаратной части. Сам сбой производится тестировщиком путём отключения, например, 
одного из серверов или его перезагрузки. Тестирование не нацелено на проверку надёжности системы. При этом нагрузка на систему не уменьшается и имеет 
средние или пороговое значение.
В ходе тестирования измеряются следующие показатели:
- время, за которое система восстановится после сбоя;
- корректность восстановленных данных.

5. Стрессовое тестирование - что произойдет при незапланированной нагрузке? Целью данного вида тестирования производительности является оценка производительности 
системы при пороговых значениях рабочей нагрузки или за её пределом. Также в ходе тестирования можно оценивать работу системы при изменении ресурсов доступных 
системе таких как процессорное время, память, ширина сетевого канала и т.д.
В ходе тестирования измеряется:
- возможность и время регенерации системы – возможность и время возвращения системы к нормальному состоянию после стрессовых нагрузок;
- корректность логирования ошибок и оповещений о их возникновении;
- производительность системы при стрессовой нагрузке;
- оценка влияния сбоев тестируемой системы на внешние системы.

6. Тестирование объемов - как будет работать система, если объем базы данных увечится в 100 раз? Тестирование позволяет оценить производительность системы при 
увеличении объёмов данных как самого приложения, так и его базы данных. Основной вопрос, на который отвечает данный вид тестирования производительности: 
“Что будет завтра с этим приложением или через год при увеличении числа пользователей и/или увеличение хранимых пользовательский и системных данных?”.
Во время тестирования измеряются следующие параметры:
- зависимость времени выполнения операций на сервере от объема данных;
- количество пользователей, которые могут одновременно работать с приложением “быстро”;
- как быстро увеличивается объем данных при работе приложения.

7. Тестирование масштабируемости - как будет увеличиваться нагрузка на компоненты системы при увеличении числа пользователей? Данное тестирование производится для 
проверки возможностей масштабирования приложения под любым видом нагрузки. Также необходимо проверять производительность системы во время масштабирования.
Виды масштабирования, которые проверяются в ходе тестирования:
- вертикальное масштабирование – увеличения производительности каждого отдельного компонента системы (добавление оперативной памяти на сервере, 
замена процессора и т.д.) для повышения производительности всей системы в целом;
- горизонтальное масштабирование – распределение системы на большее количество серверов параллельно работающих и выполняющих одни и те же функции;
- применение временного масштабирования внутри системы с помощью очередей, асинхронных запросов и т.п.

8. Тестирование потенциальных возможностей - какое количество пользователей может работать? Является отчасти подвидом тестирования масштабируемости. 
Если в тестирование масштабируемости основной вопрос, который ставится: насколько хорошо справляется система с возрастающим количеством пользователей (нагрузки). 
То в данном случае вопрос звучит следующим образом: сколько пользователей (с какой нагрузкой) может работать с системой при этом время отклика и другие параметры 
производительности должны находится в пределах допустимых значений? Данный вид тестирования позволяет определить стратегию масштабирования и вообще понять, 
а стоит ли масштабировать систему?
9. Конфигурационное тестирование - как заставить систему работать быстрее? Данный вид тестирования проверяет производительность системы на разных аппаратных и
программных конфигурациях. В ходе тестирования измеряются основные показатели производительности системы при средних и пороговых значениях нагрузки. 
Данный вид тестирования производительности позволяет убедится, что на других конфигурациях аппаратного и программного обеспечения система будет работать с 
одинаковой производительностью.

10. Тестирование сравнения - какое оборудование и ПО выбрать? Позволяет сравнить производительности на разной конфигурации программной и аппаратной части системы. 
Данное тестирование помогает выбирать наиболее оптимальную конфигурацию аппаратного и программного обеспечения. В ходе тестирования производится проверка на 
разных конфигурациях, при этом профиль тестирования не изменяется от конфигурации к конфигурации и имеет среднюю или пороговую интенсивность нагрузки.
Тестирование позволяет ответить на такие вопросы как:
- какую СУБД выбрать?
- какое оборудование выбрать (платформа, производитель, цена и т.д.)?
- как повлияют на работу приложения обновления и патчи?

Инструменты проверки производительности и нагрузки:
- Apache JMeter
- LoadSophia
- HP Load Runner
- Load Impact
- …

II. Юзабилити-тестирование — это метод оценки интерфейса со стороны удобства и эффективности его использования. 
Чтобы получить ее, нужно привлечь представителей целевой аудитории программного продукта.
Как правило, его стоит проводить, когда уже сформирован интерфейс в виде бумажного или цифрового прототипа либо готовый программный продукт, и вы хотите понять, 
какие проблемы возникают в работе и насколько продукт соответствует ожиданиям пользователей.
Процесс тестирования занимает в среднем от месяца до трех. Это зависит от множества факторов: наличия разных типов продукта, сложности сценариев и наличия 
их альтернатив, количества пользовательских ролей.

Этапы юзабилити-тестирования:
1. определение цели;
2. создание плана тестирования;
3. определение количества исследователей;
4. определение целевой аудитории;
5. получение пользовательского согласия;
6. организация доступа;
7. проведение наблюдения;
8. анализ.

Важно!!!
1. Если ты – не целевая аудитория продукта, то ты понятия не имеешь, что такое «удобно», и что такое «не удобно»

Юзабилити. Проверяемые характеристики:
1. Следование стандартам
2. Одинаковость
3. Гибкость
4. Интуитивность
5. Комфортность
6. Корректность
7. Полезность

III. Тестирование безопасности - это стратегия тестирования, используемая для проверки безопасности системы, а также для анализа рисков, связанных с обеспечением
целостного подхода к защите приложения, атак хакеров, вирусов, несанкционированного доступа к конфиденциальным данным.

Принципы безопасности:
1. Конфиденциальность - это сокрытие определенных ресурсов или информации. Под конфиденциальностью можно понимать ограничение доступа к ресурсу некоторой 
категории пользователей, или другими словами, при каких условиях пользователь авторизован получить доступ к данному ресурсу.
2. Целостность. Существует 2 критерия для определения понятия целостности:
- Доверие. Ожидается, что ресурс будет изменен только соответствующим способом, определенной группой пользователей.
- Повреждение и восстановление. В случае когда данные повреждаются или неправильно меняются авторизованным или не авторизованным пользователем, 
вы должны определить на сколько важной является процедура восстановления данных.
3. Доступность представляет собой требования о том, что ресурсы должны быть доступны авторизованному пользователю, внутреннему объекту или устройству. 
Как правило, чем более критичен ресурс тем выше уровень доступности должен быть.

Виды уязвимостей:
1. XSS (Cross-Site Scripting) - это вид уязвимости программного обеспечения (Web приложений), при которой, на генерированной сервером странице, 
выполняются вредоносные скрипты, с целью атаки клиента.
2. XSRF / CSRF (Request Forgery) - это вид уязвимости, позволяющий использовать недостатки HTTP протокола, при этом злоумышленники работают по следующей схеме: 
ссылка на вредоносный сайт устанавливается на странице, пользующейся доверием у пользователя, при переходе по вредоносной ссылке выполняется скрипт, 
сохраняющий личные данные пользователя (пароли, платежные данные и т.д.), либо отправляющий СПАМ сообщения от лица пользователя, либо изменяет доступ 
к учетной записи пользователя, для получения полного контроля над ней.
3. Code injections (SQL, PHP, ASP и т.д.) - это вид уязвимости, при котором становится возможно осуществить запуск исполняемого кода с целью получения доступа к 
системным ресурсам, несанкционированного доступа к данным либо выведения системы из строя.
4. Server-Side Includes (SSI) Injection - это вид уязвимости, использующий вставку серверных команд в HTML код или запуск их напрямую с сервера.
5. Authorization Bypass - это вид уязвимости, при котором возможно получить несанкционированный доступ к учетной записи или документам другого пользователя

IV. Тестирование окружений
1. Окружение — это среда, место, машина, на которой находится приложение, сайт. 
2. Тестовое окружение — это то место, где тестировщик тестирует сайт, приложение, программу.
3. В процессе разработки, как правило, существует несколько тестовых окружений.
4. Зачем нужно иметь несколько тестовых окружений? Дело в том, что большие системы могут быть развернуты не на одной машине, не на одном окружении, а на нескольких, 
это уже называют кластером. А разработчик пишет код не на нескольких машинах, а на одной, поэтому выделяют ещё другой тип тестового окружения — локальное окружение.
5. Локальное окружение — это всего одна машина, на которой разрабатывают, тестируют приложение.
6. Боевое окружение — это уже реальная сеть машин, совокупность нескольких окружение, это уже не тестовое окружение, а то где работают пользователи приложения.
7. Чтобы не тестировать на боевом окружении, но при этом нужно проверить работу сразу на нескольких машинах, создают тестовое окружение из нескольких машин.
8. Таким образом, можно тестировать приложение как на локальном тестовом окружении, так и на окружении с несколькими машинами, чтобы не влиять на работу реального 
приложения, которое используют реальные пользователи.

